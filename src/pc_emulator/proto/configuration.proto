syntax = "proto2";

package pc_specification;

enum DataTypeCategory {
    BOOL = 0;
    BYTE = 1;
    WORD = 2;
    DWORD = 3;
    LWORD = 4;
    CHAR = 5;
    INT = 6;
    SINT = 7;
    DINT = 8;
    LINT = 9;
    UINT = 10;
    USINT = 11;
    UDINT = 12;
    ULINT = 13;
    REAL = 14;
    LREAL = 15;
    TIME = 16;
    DATE = 17;
    TIME_OF_DAY = 18;
    DATE_AND_TIME = 19;
    DERIVED = 20;
    POU = 21;
    ARRAY = 22; //used for internal purposes only
    NOT_ASSIGNED = 23; // used for internal purposes only
}

enum FieldInterfaceType {
    VAR_INPUT = 0;
    VAR_OUTPUT = 1;
    VAR_IN_OUT = 2;
    VAR = 3;
    VAR_TEMP = 4;
    VAR_EXTERNAL = 5;
    VAR_GLOBAL = 6;
    VAR_ACCESS = 7;
    VAR_EXPLICIT_STORAGE = 8;
    NA = 9;
}

enum FieldQualifiers {
    R_EDGE = 0;
    F_EDGE = 1;
    READ_ONLY = 2;
    READ_WRITE = 3;
    NONE = 4;
}

enum MemType {
    INPUT_MEM = 0;
    OUTPUT_MEM = 1;
    RAM_MEM = 2;
}

enum TaskType {
    INTERVAL = 0;
    INTERRUPT = 1;
}

enum PoUType {
    FC = 0;
    FB = 1;
    PROGRAM = 2;
    NOA = 3;
}

enum LogLevels {
    LOG_NONE = 0;
    LOG_INFO = 1;
    LOG_ERROR = 2;
    LOG_VERBOSE = 3;
};

// Can either be specified using the 3 fields
// mem_type, byte_offset, bit_offset or compactly as a string
message FieldStorageSpec {
    optional MemType mem_type = 1;
    optional int64 byte_offset = 2;
    optional int32 bit_offset = 3;
    
    optional string full_storage_spec = 4;
}

// DataTypeField may only be specified for DataTypes where datatype_category
// is in {POU, DERIVED}
message DataTypeField {
    required string field_name = 1;
    required string field_datatype_name = 2;
    optional double range_min = 3;
    optional double range_max = 4;

    // May only be specified if intf_type is not in 
    // {VAR_EXPLICIT_STORAGE, VAR_ACCESS, VAR_EXTERNAL}
    optional string initial_value = 5;

    // must only be specified if this field is an array
    optional int32 dimension_1 = 6;

    // must only be specified if this field is an 2d-array 
    optional int32 dimension_2 = 7; 

    // may only be specified if parent datatype_category is POU.
    // It can be equal to VAR_EXPLICIT_STORAGE or VAR_ACCESS only 
    // if pou_type = PROGRAM
    optional FieldInterfaceType intf_type = 8 [default = NA];

    // must be specified only if intf_type in 
    // {VAR_EXPLICIT_STORAGE, VAR_ACCESS}
    optional FieldStorageSpec field_storage_spec = 9; 

    // May only be specified (optionally) for VAR_INPUT, VAR_EXPLICIT_STORAGE 
    // and VAR_ACCESS intf_types. Otherwise it is ignored.
    //
    // May equal R_EDGE/F_EDGE only iff intf_type is 
    // VAR_INPUT/VAR_EXPLICIT_STORAGE and field_datatype_name is BOOL.
    // Otherwise it is ignored.
    //
    // May equal READ_ONLY/READ_WRITE only iff intf_type is VAR_ACCESS.
    // Otherwise it is ignored.
    optional FieldQualifiers field_qualifier = 10 [default=NONE];
}


// DataTypeSpec may only be specified for DataTypes where datatype_category 
// is not in {POU, DERIVED, ARRAY, NOT_ASSIGNED}
message DataTypeSpec {
    optional double range_min = 1;
    optional double range_max = 2;
    optional string initial_value = 3;

    // Must only be specified if this datatype is supposed to be a typedef of 
    // an ARRAY of [datatype_category] i.e if datatype_category is INT and 
    // if datatype_spec with dimension_1 = 10 is specified, then this datatype 
    // is a typedef of an integer array of size 10 (ARRAY[10] of INT)
    optional int32 dimension_1 = 4; // must only be specified if this datatype is 
                                    // typedeffing an array
    optional int32 dimension_2 = 5; // must only be specified if this datatype is
                                    // typedeffing a 2d-array

}

message DataType {
    required string name = 1;
    // datatype_category cannot be in  {ARRAY, NOT_ASSIGNED}
    // This datatype will be treated as a typedef of an array 
    // if dimensions are specified in datatype_spec
    optional DataTypeCategory datatype_category = 2 [default =POU];

    // will be used only if datatype_category is POU
    optional PoUType pou_type = 3 [default = PROGRAM]; 

    // must be specified only if datatype_category is POU or DERIVED
    repeated DataTypeField datatype_field = 4;

    // datatype_spec may only be specified if datatype_category is not in 
    // {POU, DERIVED, ARRAY, NOT_ASSIGNED}
    optional DataTypeSpec datatype_spec = 5;
}

message SFBSpecification {
    required string sfb_name = 1;
    required int64 exec_time_ns = 2;
}

message SFCSpecification {
    required string sfc_name = 1;
    required int64 exec_time_ns = 2;
}

message InstructionSpecification {
    required string ins_name = 1;
    required int64 exec_time_ns = 2;
}

message IntervalTaskParams {
    required int64 interval_ms = 1;
}

message InterruptTaskParams {
    required string trigger_variable_field = 1;
}

message TaskSpecification {
    required string task_name = 1;
    required int32 priority = 2;
    required TaskType type = 3;
    optional IntervalTaskParams interval_task_params = 4;
    optional InterruptTaskParams interrupt_task_params = 5;
}

message ProgramVariableInitialization {
    required string pou_variable_field_name = 1;
    required string mapped_variable_field_name = 2; 
}

message ProgramSpecification {
    required string program_name = 1;
    required string pou_variable_type = 2;
    required string task_name = 3;
    repeated ProgramVariableInitialization initialization_maps = 4;
}

message ResourceSpecification {
    required string resource_name = 1;
    optional int64 input_mem_size_bytes = 2;
    optional int64 output_mem_size_bytes = 3;
    optional DataType resource_global_var = 4;
    repeated DataType pou_var = 5;
    repeated TaskSpecification tasks = 6;
    repeated ProgramSpecification programs = 7;
    
}

message MachineSpecification {
    required int32 num_cpus = 1;
    optional int64 ram_mem_size_bytes = 2;
    repeated InstructionSpecification ins_spec = 3;
    repeated SFCSpecification sfc_spec = 4;
    repeated SFBSpecification sfb_spec = 5;
    repeated ResourceSpecification resource_spec = 6;
}

message Specification {
    optional string config_name = 1;
    optional LogLevels log_level = 2;
    optional string log_file_path = 3;
    optional bool enable_kronos = 4;
    required int32 run_time_secs = 5;
    repeated DataType datatype_declaration = 6;
    optional DataType config_global_pou_var = 7;
    optional DataType config_access_pou_var =8;
    required MachineSpecification machine_spec = 9;
}
